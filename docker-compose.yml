networks:
  services:

services:
  postgres:
    image: postgres:16
    container_name: postgres
    networks:
      - services
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=sampledb
    volumes:
      - ./sql/create_database.sql:/docker-entrypoint-initdb.d/1-create_database.sql
      - ./sql/create_data.sql:/docker-entrypoint-initdb.d/2-create_data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:  ["postgres", "dev"]
  rls-api:
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: ./docker/rls-api/Dockerfile
    restart: on-failure
    env_file: ./docker/.env
    profiles:  ["api", "dev"]
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.initialize": false,
        "spring.datasource.url"  : "jdbc:postgresql://postgres:5432/sampledb",
        "spring.datasource.username" : "postgres",
        "spring.datasource.password" : "password",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.jpa.open-in-view": false,
        "spring.jpa.hibernate.naming.physical-strategy": "org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.show-sql": true,
        "spring.jpa.hibernate.ddl-auto": "none"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true